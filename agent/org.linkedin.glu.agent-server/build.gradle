/*
* Copyright (c) 2010-2010 LinkedIn, Inc
* Portions Copyright (c) 2013 Yan Pujante
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not
* use this file except in compliance with the License. You may obtain a copy of
* the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations under
* the License.
*/

apply plugin: 'org.linkedin.cmdline'

buildscript {
  dependencies {
    classpath spec.external.utilsZookeeperCliImpl
  }
}

configurations {
  zkBuild
}

dependencies {
  zkBuild spec.external.utilsZookeeperCliImpl
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.zkBuild.each {File file ->
  loader.addURL(file.toURI().toURL())
}

cmdline {
  dependsOn = [':agent:org.linkedin.glu.agent-server-upgrade:package-assemble']
  replacementTokens = [
    'agent.version': version,
    'agent.name': 'org.linkedin.glu.agent-server'
  ]
  folders = ['data']
  resources << packageIncludes
  noPackageInstallTask = true
}

def agentServerUpgradeProject = evaluationDependsOn(':agent:org.linkedin.glu.agent-server-upgrade')

// customizing package-assemble task to add agent upgrade to it
project.'package-assemble'.doFirst {
  copy {
    from agentServerUpgradeProject.convention.plugins.cmdline.assemblePackageFile
    into new File(project.convention.plugins.cmdline.assemblePackageFile, version)
  }
}

/**
 * Install the package in the destinationDir
 */
private void packageInstall(File destinationDir)
{
  ant.untar(src: project.convention.plugins.cmdline.packageFile, dest: destinationDir.parentFile, compression: 'gzip')
  ant.chmod(dir: destinationDir.parentFile, perm: 'ugo+rx', includes: '**/bin/*')
  logger.lifecycle("Installed in ${destinationDir}")
}

/**************************************************************
 * task: setup
 * This is used for dev only to quickly set up the environment.
 * Create one fabric (dev) and use canonical host name for the agent
 ***************************************************************/
task 'setup' << {
  def fabric = userConfig.glu.agent.devsetup.fabric ?: 'dev'

  setupFabricInZooKeeper(fabric)

  def agentName = userConfig.glu.agent.devsetup.name ?:
                  InetAddress.getLocalHost().canonicalHostName

  setupAgentInZooKeeper(fabric, agentName)
}

/**************************************************************
* task: setup-<a>-<f>
 * This is used for dev only to quickly set up the environment
 * Creates <f> fabrics with <a> agents
 ***************************************************************/
def setupTaskPattern = ~/setup-([0-9]+)-([0-9]+)/

tasks.addRule("Pattern: setup-<agentCount>-<fabricCount>") { String taskName ->
  def matcher = setupTaskPattern.matcher(taskName)
  if(matcher.matches())
  {
    createSetupTask(matcher[0][1] as int, matcher[0][2] as int)
  }
}

private createSetupTask(int ac, int fc)
{
  task([dependsOn: 'package', description: "Setup ${ac} agent(s) in ${fc} fabric(s)"], "setup-${ac}-${fc}") << {
    def setupFabrics = (1..fc).collect { "glu-dev-${it}"}

    def setupAgents = [:]
    (0..<ac).each { i ->
      setupAgents["agent-${i+1}"] = setupFabrics[i % fc]
    }

    // setting up the fabrics: loading the keys and the agent config
    setupFabrics.each { setupFabricInZooKeeper(it) }

    def basePort = (userConfig.glu.agent.devsetup.basePort ?: 13906) as int

    // setup each agent fabric
    setupAgents.eachWithIndex { agent, fabric, idx ->
      setupAgentInZooKeeper(fabric, agent)
      setupAgent(agent, basePort + idx)
    }

    def devStartupFile = new File(devsetupDir, "bin/agentdevctl.sh")
    devStartupFile.parentFile.mkdirs()
    devStartupFile.text = createAgentDevCtl(setupAgents.keySet())

    ant.chmod(file: devStartupFile, perm: 'ugo+rx')
  }
}

/**
 * Create the shell script that will launch the agents installed during setup-x-y target
 */
private String createAgentDevCtl(def agents)
{
"""#!/bin/bash

usage()
{
  echo ""
  echo "   Usage:  agentdevctl.sh start|stop|status|tail"
  echo ""
}

start()
{
${agents.collect { computeDevsetupCmd("start", it) }.join("\n")}
}

stop()
{
${agents.collect { computeDevsetupCmd("stop", it) }.join("\n")}
}

status()
{
${agents.collect { computeDevsetupCmd("status", it) }.join("\n")}
}

tail()
{
exec tail -f ${agents.collect { new File(devsetupDir, "agents/${it}/data/logs/${project.name}.out") }.join(" ")}
}

case \$1 in
  'start' ) start
            ;;
  'stop'  ) stop
            ;;
  'status') status
            ;;
  'tail') tail
            ;;
         *) usage
            exit 1
            ;;
esac
"""
}

private String computeDevsetupCmd(String cmd, def agent)
{
  "GLU_AGENT_APPS=${new File(devsetupDir, "apps/${agent}")} ${new File(devsetupDir, "agents/${agent}/bin/agentctl.sh")} ${cmd}"
}

/**************************************************************
 * Cleans what was setup
 ***************************************************************/
task 'clean-setup' << {
  zk(['rm', '-r', zkRoot])
  delete devsetupDir
  logger.lifecycle("Deleted ${devsetupDir}")
}

/**
 * Invoke the zk cli directly from gradle
 * @param args
 */
private void zk(args)
{
  org.linkedin.zookeeper.cli.ClientMain.mainNoExit(args)
}

/**
 * Uploads the provided file in zookeeper at the provided path
 */
private void zkUpload(String filePath, String zkPath)
{
  if(new File(filePath).exists())
    zk(['upload', '-f', filePath, zkPath])
}

/**
 * @return root in zookeeper (configurable via glu.agent.devsetup.zkRoot property)
 */
String getZkRoot()
{
  return userConfig.glu.agent.devsetup.zkRoot ?: '/org/glu'
}

/**
 * @return setup directory (configurable via glu.agent.devsetup.dir property)
 */
File getDevsetupDir()
{
  if(userConfig.glu.agent.devsetup.dir)
    return new File(userConfig.glu.agent.devsetup.dir)

  new File(project.convention.plugins.cmdline.installDir, "devsetup")
}

/**
 * Setup the fabric in zookeeper: copy the zookeeper agent config and key store
 */
private void setupFabricInZooKeeper(def fabric)
{
  def zkConfigDir = new File(rootDir, "packaging/org.linkedin.glu.packaging-setup/src/cmdline/resources/zookeeper-config").canonicalPath
  def zkAgentConfigPath = "${zkRoot}/agents/fabrics/${fabric}/config"

  // keys
  agentKeys.each { key ->
    zkUpload(key.canonicalPath, "${zkAgentConfigPath}/${key.name}")
  }

  // config
  zkUpload("${zkConfigDir}/config.properties", "${zkAgentConfigPath}/config.properties")

  logger.lifecycle("Fabric ${fabric} setup in zookeeper")
}

/**
 * Configure the given agent to use the given port
 */
private void setupAgent(def agent, int port)
{
  def baseAgentDir = new File(devsetupDir, "agents")
  baseAgentDir.mkdirs()
  def agentDir = new File(baseAgentDir, agent)
  packageInstall(agentDir)
  new File(baseAgentDir, project.convention.plugins.cmdline.packageName).renameTo(agentDir)

  def agentConfig = """

# Special config added during dev setup
glu.agent.name=${agent}
glu.agent.port=${port}
glu.agent.zkConnectString=127.0.0.1:2181
  """

  new File(agentDir, "${version}/conf/agentConfig.properties").append(agentConfig)
  logger.lifecycle("Agent ${agent} installed in ${agentDir}")
}

/**
 * Assign the agent to the fabric in zookeeper
 */
private void setupAgentInZooKeeper(def fabric, def agent)
{
  zk(['put', '-f', fabric, "${zkRoot}/agents/names/${agent}/fabric"])
  logger.lifecycle("Agent ${agent} fabric set to ${fabric}")
}