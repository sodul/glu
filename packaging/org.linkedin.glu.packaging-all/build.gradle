/*
 * Copyright (c) 2010-2010 LinkedIn, Inc
 * Portions Copyright (c) 2011-2013 Yan Pujante
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

apply plugin: 'org.linkedin.cmdline'
apply plugin: 'org.linkedin.release'

allRepositories.utilsZookeeperDistribution.configure()

configurations {
  zookeeperPackages
}

dependencies {
  zookeeperPackages spec.external.utilsZookeeperServerPackage
  zookeeperPackages spec.external.utilsZookeeperCliPackage
}

def dependentClis = [
  ':agent:org.linkedin.glu.agent-server': 'agent-server',
  ':agent:org.linkedin.glu.agent-cli': 'agent-cli',
  ':console:org.linkedin.glu.console-server': 'console-server',
  ':console:org.linkedin.glu.console-cli': 'console-cli',
  ':packaging:org.linkedin.glu.packaging-setup': 'setup'
]

cmdline {
  folders = []
  dependsOn = dependentClis.keySet().collect { "${it}:package-assemble" }
  resources << packageIncludes

  replacementTokens = [
    'glu.version': project.version,
    'jetty.distribution': "jetty-distribution-${spec.versions.jetty}",
    'zookeeper.version': spec.versions.utilsZookeeper
  ]
    // keys
  resources << [
    from: agentKeys,
    into: new File(assemblePackageFile, 'models/tutorial/keys'),
    replaceTokens: false
  ]

  resources << [
    from: consoleKeys,
    into: new File(assemblePackageFile, 'models/tutorial/keys'),
    replaceTokens: false
  ]
}

release  {
  publish = allRepositories.distributions
}

def dependentProjects = dependentClis.keySet().collect { evaluationDependsOn(it) }

// customizing package-assemble task to add agent cli, agent server and war
project.'package-assemble'.doFirst {
  File basePackage = project.convention.plugins.cmdline.assemblePackageFile
  File packages = new File(basePackage, "packages")
  packages.mkdirs()

  dependentProjects.each { dp ->
    File destDir = new File(packages, dp.convention.plugins.cmdline.assemblePackageFile.name)
    copy {
      from dp.convention.plugins.cmdline.assemblePackageFile
      into destDir
    }
    // this information is redundant because it is at the root already
    ant.delete {
      fileset(dir: destDir, includes: packageIncludesFiles.join(','))
    }
  }

  configurations.zookeeperPackages.resolve().each { zkp ->
    copy {
      from tarTree(zkp)
      into packages
    }
  }
}

/**
 * Generate links only if required to do so
 */
if(project.properties['no.symbolic.links'] != 'true')
{
  project.'package-assemble'.doLast {
    File basePackage = project.convention.plugins.cmdline.assemblePackageFile
    File lib = new File(basePackage, "lib")
    delete lib
    lib.mkdirs()

    def allJars = fileTree(dir: basePackage)

    allJars.include "**/*.jar"

    def jarFiles = [:]

    allJars.each { File jar ->

      File topLibJar = new File(lib, jar.name)

      def sha1 = org.gradle.util.hash.HashUtil.sha1(jar).asBigInteger().toString(16).padLeft(40, '0')

      def previousSha1 = jarFiles[jar.name]
      if(!previousSha1)
      {
        copy {
          from jar
          into lib
        }
        jarFiles[jar.name] = sha1
      }
      else
      if(sha1 != previousSha1)
        throw new Exception("mismatch sha1 [${sha1} != ${previousSha1}] for ${jar}")

      delete jar

      def relativeLink = jar.parentFile.toPath().relativize(topLibJar.toPath())

      // YP note: It is SO frustrating that I cannot actually use symbolic links since nothing seems
      // to support it :( => gradle tar does not, ant tar does not, etc...
      // => need to 'implement' it myself :(
      new File(jar.parentFile, "${jar.name}.lnk").text = "${relativeLink}\n${sha1}"
    }
  }
}

